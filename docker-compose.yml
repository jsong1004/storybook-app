
services:
  storybook-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
        LEONARDO_API_KEY: ${LEONARDO_API_KEY}
        BLOB_READ_WRITE_TOKEN: ${BLOB_READ_WRITE_TOKEN}
    container_name: storybook-app
    ports:
      - "3000:3000"
    environment:
      # Runtime environment variables
      NODE_ENV: production
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      LEONARDO_API_KEY: ${LEONARDO_API_KEY}
      BLOB_READ_WRITE_TOKEN: ${BLOB_READ_WRITE_TOKEN}
    restart: unless-stopped
    networks:
      - storybook-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add nginx for production deployment with SSL
  nginx:
    image: nginx:alpine
    container_name: storybook-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - storybook-app
    networks:
      - storybook-network
    profiles:
      - production

networks:
  storybook-network:
    driver: bridge

volumes:
  storybook-data:
    driver: local